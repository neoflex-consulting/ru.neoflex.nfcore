@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.application/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.application
import ru.neoflex.nfcore.dataset.DatasetComponent
import ru.neoflex.nfcore.dataset.Dataset
import ru.neoflex.nfcore.dataset.DatasetColumn
import ru.neoflex.nfcore.dataset.FormatMask
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Date
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.tag.Tagged
import ru.neoflex.nfcore.notification.Notification
import ru.neoflex.nfcore.notification.NotificationStatus
import ru.neoflex.nfcore.masterdata.EntityType
import ru.neoflex.nfcore.base.auth.GrantType

annotation "ru.neoflex.nfcore" as NFCore
annotation "http://orientdb.com/meta" as OrientDB

/* Components */
abstract class Component extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
}

@NFCore(documentation="Интерфейс, которым помечаются классы, доступные для использования в EventAction или EventHandler")
abstract class DynamicActionElement {
}

@NFCore(documentation="Элемент ввода")
abstract class InputElement {
        @NFCore(documentation="Заголовок элемента")
    String title
        @NFCore(documentation="Положение заголовка")
    TitleOrientation titleOrientation
        @NFCore(documentation="Текст указанный в подсказке")
    String helpText
        @NFCore(documentation="Положение выпадающей подсказки")
    HelpOrientation helpOrientation
}

@NFCore(documentation="Интерфейс, которым помечаются классы, доступные для использования в таблицах, в строках с данными")
abstract class GridComponent {
        @NFCore(documentation="Определяет значение, передаваемое из таблицы в компоненту. Варианты: String - напрямую значение из ячейки; Object - вся строка целиком; None - пустая строка")
    GridComponentValueType returnValueType
        @NFCore(documentation="Определает, будет ли компонент отображаться в режиме редактирования таблицы")
    boolean isEditGridComponent
}

@NFCore(documentation="Таблица справочников")
class MasterdataView extends ViewElement {
        @NFCore(documentation="Тип сущности из мастерданных")
    refers EntityType entityType
}

@NFCore(documentation="Глобальные настройки приложения")
class GlobalSettings extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Календарь со всеми выходными днями в году")
    refers YearBook weekendCalendar
        @NFCore(documentation="Календарь со всеми праздничными днями в году")
    refers YearBook holidayCalendar
        @NFCore(documentation="Календарь со всеми рабочими днями в году")
    refers YearBook workingDaysCalendar
        @NFCore(documentation="Календарь со всеми выходными днями в году")
    refers AppModule dashboard
}

@NFCore(documentation="Модуль - составная часть глобального приложения")
@Ecore(constraints="IsValid")
class AppModule extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Стартовая страница приложения или модуля")
    contains ViewElement view
        @NFCore(documentation="Меню с модулями - область слева в пользовательском режиме")
    contains CatalogNode referenceTree
        @NFCore(documentation="Использование Меню с модулями от родительского приложения или модуля")
    boolean useParentReferenceTree
        @NFCore(disabled="true", documentation="Права доступа: чтение, чтение и запись, отказано. (поле только для чтения)")
    GrantType grantType = "Write"
        @NFCore(documentation="Проверка прав. Если true, то, при начитке объекта, бэк анализирует роль пользователя и его права доступа, а после выставляет значение поля grantType")
    boolean checkRights
        @NFCore(documentation="Переменные используемые в модуле")
    contains ValueHolder[] variables
        @NFCore(documentation="Обработчики событий в модуле")
    contains EventHandler[] eventHandlers
        @NFCore(documentation="Исполняемый код groovy")
    contains GroovyCommand[] groovyCommands
        @NFCore(documentation="Ссылка на style sheet")
    refers StyleSheet[] styleSheets
}

@NFCore(documentation="Глобальное приложение - отображается в верхнем меню")
@Ecore(constraints="IsValid")
class Application extends AppModule {
        @NFCore(documentation="Порядковый номер отображения названия приложения в верхнем меню. Если не заполнено то приложение будет выведено после всех других приложений у которых номер указан")
    Integer headerOrder
}

/* Views */
@NFCore(documentation="Элементы визуального интрфеса, доступные в меню 'view' в Application и AppModule")
@Ecore(constraints="IsValid")
abstract class ViewElement extends DynamicActionElement {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
        @OrientDB(key="true")
	String name
	    @NFCore(documentation="Контейнер для элементов визуального интрфеса, доступных в меню 'view' в Application и AppModule")
	container ViewContainer parent opposite children
	    @NFCore(documentation="Проверка прав. Если true, то, при начитке объекта, бэк анализирует роль пользователя и его пара доступа,а после выставляет значение поля grantType")
	boolean checkRights
        @NFCore(disabled="true", documentation="Права доступа: чтение, чтение и запись, отказано. (поле только для чтения)")
    GrantType grantType = "Write"
        @NFCore(documentation="Скрытие элемента от пользователя. Да/Нет")
    boolean hidden
        @NFCore(documentation="Деактиваиця элемента от пользователя. Да/Нет")
    boolean disabled
        @NFCore(documentation="CSS классы, подключаемые к оформлению объекта, созданные в приложении")
    refers CssClass[] cssClass
}

@NFCore(documentation="Контейнер для элементов визуального интрфеса, доступных в меню 'view' в Application и AppModule")
abstract class ViewContainer extends ViewElement {
        @NFCore(documentation="Элементы визуального интрфеса, доступные в меню 'view' в Application и AppModule")
	contains ViewElement[] children opposite parent
}

@NFCore(documentation="Иконка, как элемент визуального интерфейса")
abstract class Icon extends ViewElement {	
}

@NFCore(documentation="Календарь, как элемент визуального интерфейса")
@Ecore(constraints="IsValid")
class Calendar extends ViewElement {
        @NFCore(documentation="Массив уведомлений, который отображаются в календаре")
    refers Notification[] notifications
        @NFCore(documentation="Календарь рабочих дней, на основании из которого высчитаваются подписи '1 рабочий день'...")
    refers YearBook yearBook
        @NFCore(documentation="Подпись для выходных и праздничных дней в календаре")
    String defaultTitle
        @NFCore(documentation="Статус, который присваивается всем уведомлениям, созданным из пользовательского интерфейса")
    refers NotificationStatus defaultStatus
        @NFCore(documentation="Функция запроса к БД для получения всех экземпляров уведомления за период с и по")
    op JSON getNotificationInstances(String dateFrom, String dateTo)
        @NFCore(documentation="Функция запроса к БД для создания нового уведомления")
    op JSON createNotification(JSON newNotification)
        @NFCore(documentation="Название параметра передаваемого в url при переходе в отчёт")
    String urlDateParameterName = "reportDate"
}

@NFCore(documentation="Область которую можно свернуть/развернуть")
class Collapse extends ViewContainer {
    @NFCore(documentation="Если true, коллапс будет открыт")
        boolean isOpen
}

@NFCore(documentation="Перечень дней (рабочих, выходных, праздничных). Применяется в глобальных настройках приложения 'GlobalSettings'")
class YearBook extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Перечень дней")
    contains Day[] days
        @NFCore(documentation="Функция удаления всех имеющихся дней за выбранный год и создание новых (СБ, ВС)")
    op JSON recreateWeekend(String year)
        @NFCore(documentation="Функция копирования всех дней за выбранный год 'yearFrom' и создания аналогичных дней в году 'yearTo'")
    op JSON copyHolidays(String yearFrom, String yearTo)
        @NFCore(documentation="Функция удаления всех дней за выбранный год и пересозданиях всех дней, которые не входят в YearBooks выходных и праздничных дней из GlobalSettings")
    op JSON recreateWorkingDays(String year)
}

@NFCore(documentation="Дата. Применяется в YearBook")
class Day {
        @NFCore(documentation="Дата в календаре")
    Date date
        @NFCore(documentation="Подпись, которая будет отображаться в календаре у этого дня")
    String title
}

@NFCore(documentation="Колонка, как элемент визуального интерфейса")
class Column extends ViewContainer {
        @NFCore(documentation="Динамическая ширина колонки. Максимальное значение = 24 в одной строке")
    String span = "24"
}

@NFCore(documentation="Иконка из пакета neo-icon")
class NeoIcon extends Icon {
        @NFCore(documentation="Код иконки из пакета neo-icon", neoIconSelect="true")
	NeoIconCodes iconCode
}

@NFCore(documentation="Контейнер для компонент")
class Form extends ViewContainer {
        @NFCore(documentation="Валидируемые компоненты", showNLevelChildren="1", possibleClasses="['ru.neoflex.nfcore.application#//Input','ru.neoflex.nfcore.application#//Select','ru.neoflex.nfcore.application#//DatePicker']")
    refers ViewElement[] validationItems
        @NFCore(documentation="Правила валидации")
    contains ValidationRule[] validationRules
        @NFCore(documentation="Связи между validationItems и validationRules", formComponent="validationMapping")
    String[] validationMapping
}

@NFCore(documentation="Правила валидации")
class ValidationRule {
        @NFCore(documentation="название правила")
    String name
        @NFCore(documentation="Сообщение об ошибке валидации")
    String message
        @NFCore(documentation="Тип валидации. None - не валидируется. Required - поле обязательно к заполнению. Pattern - JS RegExp выражение. JSExpression выражение на JS поддерживаются переменные вида :item")
    ValidationRuleType validationRuleType
        @NFCore(documentation="Выражение RegExp", renderConditions="{'validationRuleType':'Pattern'}")
    String pattern
        @NFCore(documentation="Флаги RegExp", renderConditions="{'validationRuleType':'Pattern'}")
    String patternFlags = "gi"
        @NFCore(documentation="Выражение на языке javascript", renderConditions="{'validationRuleType':'JsExpression'}")
    String expression
}

@NFCore(documentation="Значение, передаваемое в URL")
abstract class ValueItem {
        @NFCore(documentation="Передаваемое значение")
    String value
        @NFCore(documentation="Если true, то значение передается в URL при переходах между страницами")
    boolean isGlobal
}

@NFCore(documentation="Элемент, который принимает значения ValueItem из URL")
abstract class CommandElement {
        @NFCore(documentation="Значения, передаваемые через URL")
    refers ValueItem[] valueItems
}

@NFCore(documentation="Таблица")
@Ecore(constraints="IsValid")
class DatasetView extends ViewElement, CommandElement {
          @NFCore(documentation="Данные для таблицы")
    refers DatasetComponent datasetComponent
          @NFCore(documentation="Не показывать панель действий")
    boolean hideActionBar
          @NFCore(documentation="Не показывать нижнюю панель переходов по страницам")
    boolean hidePaginator
          @NFCore(documentation="Название экспортируемого файла docx/excel")
    String exportFileName
          @NFCore(documentation="Набор элеменов которые не будут отображаться на панели действий", renderConditions="{'hideActionBar':false}")
    PanelActions[] hiddenPanelActions
}

@NFCore(documentation="Исполняемый код, написанный на groovy")
class GroovyCommand extends DynamicActionElement, CommandElement {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
        @OrientDB(key="true")
    String name
        @NFCore(documentation="Значения, передаваемые в groovy код. Например: {} или {'testSetId': ':testSetId','reportDate': ':reportDate','branch': ':branch'}",expandable="true")
    Text command
        @NFCore(documentation="Путь к исполняемому коду. Например: 'scripts/utils/checkBranch.groovy'", renderConditions="{'commandType':'Resource'}")
    String gitResourcePath
        @NFCore(documentation="Полный путь к классу. Например: 'ru.neoflex.nfcore.dataset.JdbcConnection'", renderConditions="{'commandType':'Static'}")
    String staticClass
        @NFCore(documentation="Статический метод из класса 'staticClass'", renderConditions="{'commandType':'Static'}")
    String staticMethod
        @NFCore(documentation="Eval - запуск кода из command; Resource - запуск кода из gitResourcePath с параметрами из command; Static - запуск модуля с параметрами из command")
    GroovyCommandType commandType = "Eval"
        @NFCore(documentation="Запуск кода в момент инициализации")
    boolean executeOnStartup
        @NFCore(documentation="Скачивание данных в файл file.txt после исполнения кода")
    boolean downloadFile
}

@NFCore(documentation="Переменная, используемая в модуле")
class ValueHolder extends DynamicActionElement, ValueItem {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
        @OrientDB(key="true")
	String name
        @NFCore(documentation="Тип значения")
	ValueType valueType
        @NFCore(documentation="Ссылка на датасет. В качестве значения выбирается выражение первого столбца. В случае если в столбце больше одного значения, проихсодить конкатенация через ;", renderConditions="{'valueType':'dataset'}")
    refers Dataset dataset
}

@NFCore(documentation="Вкладки - контейнер")
class TabsViewReport extends ViewContainer {
        @NFCore(documentation="Расположение Вкладок: сверху, снизу, справа, слева")
    TabPosition tabPosition = "Top"
}

@NFCore(documentation="Строка - контейнер")
class Row extends ViewContainer {
}

@NFCore(documentation="Область, выделенная контуром - контейнер")
class Region extends ViewContainer {
}

@NFCore(documentation="Текстовое поле")
class Typography extends ViewElement {
        @NFCore(documentation="Выравнивание поля. Возможные значения: Left, Center, Justify (по ширине), Right")
    TextAlign textAlign
        @NFCore(documentation="Кнопка копирования текста")
    boolean buttonCopyable
        @NFCore(documentation="Кнопка редактирования текста")
    boolean buttonEditable
        @NFCore(documentation="Сколько строк текста показывать 'по умолчанию'")
    String ellipsisRow = "999"
        @NFCore(documentation="Добавляет тесту стиль кода")
    boolean codeStyle
        @NFCore(documentation="Добавляет тесту стиль удаленного текста")
    boolean deleteStyle
        @NFCore(documentation="Добавляет тесту стиль неактивного поля")
    boolean disabledStyle
        @NFCore(documentation="Выделение текста цветом")
    boolean markStyle
         @NFCore(documentation="Подчеркивание текста")
    boolean underlineStyle
        @NFCore(documentation="Жирный текст")
    boolean strongStyle
        @NFCore(documentation="Обязательное поле. Отмечается красной звездочкой")
    boolean required
        @NFCore(documentation="Набор стилей текста для Neoflex Reporting")
    TypographyType typographyType
}

@NFCore(documentation="Выпадающий список")
class Select extends ViewElement, ValueItem, CommandElement, GridComponent, InputElement {
        @NFCore(documentation="Текст, отображающийся внутри поля формы, который исчезает при получении фокуса")
    String placeholder
        @NFCore(documentation="Режим отображения опций внутри выпадающего списка: Default, Multiple, Tags")
    SelectMode mode = "Default"
        @NFCore(documentation="Значения для списка берутся из 'dataset'")
    boolean isDynamic
         @NFCore(documentation="Постоянные значения в выпадающем списке. Например: Округленная:1000;Точная:1", renderConditions="{'isDynamic':false}")
    String staticValues
        @NFCore(documentation="Ссылка на Набор Данных для выпадающего спсика", renderConditions="{'isDynamic':true}")
    refers Dataset dataset
        @NFCore(documentation="Ссылка на столбец из 'dataset' значения которых будут отображаться визуально в select", renderConditions="{'isDynamic':true}")
    refers DatasetColumn datasetKeyColumn
        @NFCore(documentation="Ссылка на столбец из 'dataset' со значениями для ключей datasetKeyColumn, которые будут передаваться между компонентами", renderConditions="{'isDynamic':true}")
    refers DatasetColumn datasetValueColumn
        @NFCore(documentation="Обязательное поле. Отмечается красной звездочкой")
    boolean required
}

@NFCore(documentation="Компонента для выбора дат")
class DatePicker extends ViewElement, ValueItem, GridComponent, InputElement {
        @NFCore(documentation="Показывать кнопку очистки поля")
    boolean allowClear
        @NFCore(documentation="Формат отображения поля. Имеет первый приоритет.")
    refers FormatMask formatMask
        @NFCore(documentation="Формат отображения поля. Имеет второй приоритет. Если true, то = 'YYYY-MM-DD HH:mm:ss', если false, то = 'YYYY-MM-DD'")
    boolean showTime
        @NFCore(documentation="Обязательное поле. Отмечается красной звездочкой")
    boolean required
        @NFCore(documentation="Положение текста, отображающегося рядом с полем")
    String width
}

@NFCore(documentation="Любой Html контент")
class HtmlContent extends ViewElement, CommandElement, GridComponent {
        @NFCore(documentation="Например: В 'valueItems' ссылка на ValueHolder с именем 'errorMessage', а в поле 'htmlContent' указана ссылка на него через двоеточие ':errorMessage'", expandable="true")
    String htmlContent
}

@NFCore(documentation="Текстовое поле")
class Input extends ViewElement, ValueItem, GridComponent,InputElement {
        @NFCore(documentation="Формат данных. Варианты: InputNumber, InputString")
    InputType inputType = "InputString"
        @NFCore(documentation="Минимальное вводимое значение, если inputType = InputNumber", renderConditions="{'inputType':'InputNumber'}")
    String minValue
        @NFCore(documentation="Максимальное вводимое значение, если inputType = InputNumber", renderConditions="{'inputType':'InputNumber'}")
    String maxValue
        @NFCore(documentation="Шаг значений, если inputType = InputNumber", renderConditions="{'inputType':'InputNumber'}")
    String step
        @NFCore(documentation="Ширина поля")
    String width
        @NFCore(documentation="Текст, отображающийся внутри поля формы, который исчезает при получении фокуса")
    String placeholder
        @NFCore(documentation="Обязательное поле. Отмечается красной звездочкой")
    boolean required
}

@NFCore(documentation="Компонента с флагом")
class Checkbox extends ViewElement, GridComponent, ValueItem {
        @NFCore(documentation="Ярлык. Отображается справа от компоненты")
    String label
        @NFCore(documentation="Определяет, установлен ли флаг")
    boolean isChecked
}

@NFCore(documentation="Кнопка")
class Button extends ViewElement, GridComponent {
        @NFCore(documentation="Текст отображаемый на кнопке")
    String label
        @NFCore(documentation="Тип кнопки")
    ButtonType buttonType
        @NFCore(documentation="Размер кнопки")
    ButtonSize buttonSize
        @NFCore(documentation="Код иконки из пакета neo-icon. Иконка отображается до текста", neoIconSelect="true")
	NeoIconCodes iconCode
        @NFCore(documentation="Препятствовать обработке событий на верхних уровнях DOM модели. Например при обработке события onFinish для Form")
	boolean stopEventPropagation
}

@NFCore(documentation="Стили")
@Ecore(constraints="IsValid")
class CssClass extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Например: 'height: 40px; padding: 0 16px; box-shadow: -2px -2px 4px rgba(0, 0, 0, 0.05), 2px 2px 4px rgba(0, 0, 0, 0.1); border-radius: 4px; display: flex !important;'")
    String style
}

/* Trees */
@NFCore(documentation="Меню с модулями - область слева в пользовательском режиме")
@Ecore(constraints="IsValid")
abstract class TreeNode {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
        @OrientDB(key="true")
    String name
        @NFCore(documentation="Проверка прав. Если true, то, при начитке объекта, бэк анализирует роль пользователя и его пара доступа,а после выставляет значение поля grantType")
	boolean checkRights
        @NFCore(disabled="true", documentation="Права доступа: чтение, чтение и запись, отказано. (поле только для чтения)")
    GrantType grantType = "Write"
        @NFCore(documentation="Иконка, как элемент визуального интерфейса")
    contains Icon icon
}

@NFCore(documentation="Внешний модуль")
class AppModuleNode extends TreeNode {
        @NFCore(documentation="Ссылка на внешний модуль")
    refers AppModule AppModule
}

@NFCore(documentation="Папка")
class CatalogNode extends TreeNode {
        @NFCore(documentation="Содержимое папки")
    contains TreeNode[] children
}

@NFCore(documentation="Внутренний модуль")
class ViewNode extends TreeNode {
        @NFCore(documentation="Содержимое внутреннего модуля")
    contains ViewElement view
}

@NFCore(documentation="Обработка слушаемого события из eventHandler")
class EventAction {
        @NFCore(documentation="Доступные действия: execute, show, hide, enable, disable, setValue, showMessage, redirect, backToLastPage. После выполнения action = 'execute', запускается auto refresh")
    Action action
        @NFCore(documentation="Компонента, к которой будет направлено действие. После выполнения action = 'execute', запускается auto refresh", renderConditions="{'action':['execute','show','hide','enable','disable','setValue','showMessage']}")
    refers DynamicActionElement triggerItem
        @NFCore(documentation="Ключ объекта. Заполняется если: в качестве значения для action = setValue находится объект", renderConditions="{'action':'setValue'}")
    String valueObjectKey
        @NFCore(documentation="Статичное значение", renderConditions="{'action':'setValue'}")
    String value
        @NFCore(documentation="Переход на внешний модуль. Заполняется при: action = redirect", renderConditions="{'action':'redirect'}")
    refers AppModule redirectTo
        @NFCore(documentation="Параметры, передаваемые вместе с модулем из 'redirectTo'. Заполняется при: action = redirect", renderConditions="{'action':'redirect'}")
    refers DynamicActionElement[] redirectParams
}

@NFCore(documentation="Обработчик события")
class EventHandler {
        @NFCore(documentation="Имя элемента (может быть неуникальным во всем приложении)")
        @OrientDB(key="true")
    String name
        @NFCore(documentation="Событие. Возможные значения: click, change, componentLoad, validationFinish, validationFinishFailed")
    Event event
        @NFCore(documentation="Компонента, к которой будет направлено действие", renderConditions="{'event':['click','change','componentLoad']}")
    refers DynamicActionElement[] listenItem
        @NFCore(documentation="Обработка слушаемого события")
    contains EventAction[] eventActions
        @NFCore(documentation="Обязательное условие для выполнения действия. Например: ':variable' != '0'", renderConditions="{'event':['click','change','componentLoad']}")
    String condition
        @NFCore(documentation="Компонента, к которой применяются условия из condition. Например: 'variable ValueHolder'", renderConditions="{'event':['click','change','componentLoad']}")
    refers DynamicActionElement[] conditionItems
        @NFCore(documentation="Валидируемая компонента", renderConditions="{'event':['validationFinish','validationFinishFailed']}")
    refers Form[] validationItems
}

@NFCore(documentation="Панель, которая выдвигается с края экрана")
class Drawer extends ViewContainer {
        @NFCore(documentation="Расположение Панели: сверху, снизу, справа, слева")
    TabPosition position
        @NFCore(documentation="CSS селектор для определения родительского контейнера")
    String containerSelector
}

@NFCore(documentation="Адрес документа, на который следует перейти")
class Href extends ViewElement, GridComponent {
        @NFCore(documentation="Ярлык. Отображается внутри компоненты")
    String label
        @NFCore(documentation="Адрес документа")
    String ref
}

@NFCore(documentation="Уведомление")
class Message extends DynamicActionElement, Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Тип уведомления. Возможные значения: success, error, info, warning, open")
    MessageType messageType
        @NFCore(documentation="Заголовок уведомления")
    String header
        @NFCore(documentation="Текст уведомления")
    String message
}

@NFCore(documentation="Контейнер для переключателей")
class RadioGroup extends ViewElement, ValueItem, GridComponent  {
        @NFCore(documentation="true - вериткальное отображение, false - горизонтальное отображение")
    boolean isVerticalGroup
        @NFCore(documentation="Значения для переключителей")
    String[] radioBoxes
}

@NFCore(documentation="Стили подключаемые на страницу")
class StyleSheet {
        @NFCore(documentation="Название стиля")
    QName name
        @NFCore(documentation="Наполнение стиля в формате .css файла", expandable="true")
    String sheetContent
}

@NFCore(documentation="Лента изменений")
class ChangeLog extends ViewElement {
        @NFCore(documentation="Ссылка на dataset")
    refers Dataset dataset
        @NFCore(documentation="Поле в dataset указывающее автора изменений")
    refers DatasetColumn author
        @NFCore(documentation="Поле в dataset указывающее дату и время изменений")
    refers DatasetColumn dateTime
        @NFCore(documentation="Поле в dataset содержащее текст отображаемого сообщения")
    refers DatasetColumn message
}

@NFCore(documentation="Выравнивание поля")
enum TextAlign {
    Left
    Center
    Justify
    Right
}

@NFCore(documentation="Расположение: сверху, снизу, справа, слева")
enum TabPosition {
    Top
    Right
    Bottom
    Left
}

@NFCore(documentation="Режим отображения опций внутри выпадающего списка")
enum SelectMode {
    Default
    Multiple
    Tags
}

@NFCore(documentation="Формат данных")
enum InputType {
    InputNumber
    InputString
}

@NFCore(documentation="Положение текста")
enum TitleOrientation {
    Left
    Right
    Top
    Bottom
}

@NFCore(documentation="Eval - запуск кода из command; Resource - запуск кода из gitResourcePath с параметрами из command; Static - запуск модуля с параметрами из command")
enum GroovyCommandType {
    Eval
    Static
    Resource
}

@NFCore(documentation="Доступные действия")
enum Action {
    execute
    show
    hide
    enable
    disable
    setValue
    showMessage
    redirect
    backToLastPage
}

@NFCore(documentation="Событие")
enum Event {
    click
    change
    componentLoad
    validationFinish
    validationFinishFailed
}

@NFCore(documentation="Тип значения, передаваемого из таблицы в компоненту")
enum GridComponentValueType {
    string
    object
    none
}

@NFCore(documentation="Тип уведомления")
enum MessageType {
    success
    error
    info
    warning
    open
}

@NFCore(documentation="Набор стилей текста для Neoflex Reporting")
enum TypographyType {
    capture_regular
    h1_regular
    h2_medium
    h2_regular
    h3_medium
    h3_regular
    h4_medium
    h4_regular
    h4_light
    body_medium
    body_regular
    body_light
    body_link
    body_bold
    capture_medium
    capture_link
    capture_light
}

@NFCore(documentation="Код иконки из пакета neo-icon")
enum NeoIconCodes {
    none,
    notification,
    notificationOff,
    question,
    person,
    exit,
    settings,
    filter,
    plusBlock,
    calculator,
    barChart,
    updateClock,
    mark,
    update,
    fullScreen,
    fullScreenUnDo,
    filterCheck,
    plusBlockCheck,
    barChartCheck,
    sortCheck,
    addCheck,
    diagram,
    diagramCircle,
    diagramBlock,
    arrowUp,
    arrowDown,
    arrowVerticalRight,
    arrowLeft,
    arrowRight,
    arrowVerticalLeft,
    moveDown,
    moveUp,
    more,
    table,
    tableUp,
    alert,
    success,
    info,
    warning,
    fileExcel,
    fileWord,
    delete,
    plus,
    close,
    calendar,
    calendarFull,
    rubbish,
    fill,
    letter,
    gear,
    download,
    print,
    list,
    arrowLong,
    edit,
    menuOpen,
    search,
    tiles,
    play,
    show,
    hide,
    journal,
    star,
    starFull,
    addFile,
    attachedFile,
    duplicate,
    exportFile,
    importFile,
    undo,
    checkbox,
    checkboxFill,
    cloudServer,
    code,
    radioButton,
    radioButtonFill,
    switchOff,
    switchOn,
    legend,
    dragAndDrop,
    file,
    compose,
    tools,
    updateTwoLine,
    checkStatus,
    form,
    cloudDownload,
    directory,
    team
}

enum ValueType {
    staticValue,
    dataset
}

enum ButtonType {
    primary
    disabled
    secondary
    link
    ghost
}

enum ButtonSize {
    normal
    medium
    large
}

enum HelpOrientation {
    bottomLeft,
    bottom,
    bottomRight,
    rightBottom,
    right,
    rightTop,
    topRight,
    top,
    topLeft,
    leftTop,
    left,
    leftBottom
}

enum PanelActions {
    filter
    highlights
    sort,
    calculator,
    aggregations,
    diagram,
    groupBy,
    hiddenColumns,
    exportDocx,
    exportExcel,
    versions,
    edit
}

enum ValidationRuleType {
    None,
    Required,
    Pattern,
    JsExpression
}